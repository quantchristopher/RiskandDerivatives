##### Monte Carlo Methods for Pricing Derivative Securities by Christopher Thomson

## The following code demonstrates the application of Monte Carlo simulation in the use of pricing
## financial options on underlying stock. Both price-path independent and dependent contracts are functionally
## designed with listed inputs. 


### Basic European Call Option Pricer with Monte Carlo ####
## Assumes price path follows geometric Brownian Motion, there is no cost/profit of 
## carrying the underlying asset other than earning the risk free rate.
# S.0   = Current Price
# K     = Option Strike
# r     = Risk Free Interest Rate (Deterministic)
# sigma = Annualized Volatility
# T     = Maturity (Preferably in Years with convention 250/250)
# t     = Time to Maturity (Preferably in fractions of years 1/250)
# N     = Number of Simulations of terminal price S.T

Euro.Call.MC <- function(S.t, K, r, sigma, T, t, N) 
{
  S.Tvec <- rep(NA, N) # Generates empty vectors to be filled by for loop
  V.nT <- rep(NA,N) # ""
  for(i in 1:N) 
    {
      # First Line Simulates stock price under at terminal time T under 
      # risk neutral probability measure. Maps values to the first dummy vector:
      S.Tvec[i] <- S.t*exp((r - 0.5*sigma^2)*(T-t) + sigma*sqrt(T-t)*(rnorm(1,0,1)))
      # Second line computes the what the payoff of Euro-Call would be for each 
      # simulated terminal stock price above:
      V.nT[i] <- max(S.Tvec[i] - K, 0)
    }
  
  # Computes the sum of of option payoffs divided by the number of option payoffs
  # discounted by the risk free rate over length of time until maturity
  exp(-r*(T-t))*(1/N)*sum(V.nT)
  
}

# set.seed(287)-"Delete everything in quotations in this line and the '#' to set seed for reproducible simulation"
Euro.Call.MC(S.t = 10.56, K = 11.00, r = 0.0311, sigma = 0.15, T = 1, t = 71/250, N = 1000)
# ~ 0.4257

### To check, can use analytical formula:
## (Note that b = r in this case as no Cost/Profit aside from risk free rate)
Euro.Call.Analytic.b <- function(S.t, K, b, r, sigma, T, t)
{
  dplus <- (log(S.t/K)+(b+0.5*sigma^2)*(T-t))/(sigma*sqrt(T-t))
  dminus <- (log(S.t/K)+(b-0.5*sigma^2)*(T-t))/(sigma*sqrt(T-t))
  # Compute:
  exp((b-r)*(T-t))*S.t*pnorm(dplus, mean = 0, sd = 1) - exp(-r*(T-t))*K*pnorm(dminus, mean = 0, sd = 1)
}

## Test to compare:
Euro.Call.Analytic.b(10.56, 11, .0311, .0311, .15, 1, 71/250)
# ~ 0.4462

### Basic European Put Option Pricer with Monte Carlo ####
## Same inputs as Call Option above:

Euro.Put.MC <- function(S.t, K, r, sigma, T, t, N) 
{
  S.TvecP <- rep(NA, N) # Generates empty vectors to be filled by for loop
  V.nTP <- rep(NA,N) # ""
  for(i in 1:N) 
  {
    # First Line Simulates stock price under at terminal time T under 
    # risk neutral probability measure. Maps values to the empty vector:
    S.TvecP[i] <- S.t*exp((r - 0.5*sigma^2)*(T-t) + sigma*sqrt(T-t)*(rnorm(1,0,1)))
    # Second line computes the what the payoff of Euro-Put would be for each 
    # simulated terminal stock price above:
    V.nTP[i] <- max(K - S.TvecP[i], 0)
  }
  
  # Computes the sum of of option payoffs divided by the number of option payoffs
  # discounted by the risk free rate over length of time until maturity
  exp(-r*(T-t))*(1/N)*sum(V.nTP)
  
}
Euro.Put.MC(36.71,45,.0361,.16,1,57/250,100)

# Check with analytical solution (again b = r here as no cost/profit beyond earning rf exists here):
Euro.Put.b <- function(S.t, K, b, r, sigma, T, t) 
{
  dplus <- (log(S.t/K)+(b+0.5*sigma^2)*(T-t))/(sigma*sqrt(T-t))
  dminus <- (log(S.t/K)+(b-0.5*sigma^2)*(T-t))/(sigma*sqrt(T-t))
  # Compute:
  exp(-r*(T-t))*K*pnorm(-dminus, mean = 0, sd = 1) - exp((b-r)*(T-t))*S.t*pnorm(-dplus, mean = 0, sd = 1)
}
Euro.Put.b(36.71,45,0.0361,0.0361,.16,1,57/250)


### Asian Options ####
## Uniquely, Asian Options where payoff is the difference between the geometrically 
#  averaged underlying price and a fixed strike has direct analytical solution s 
#  (Note that this formula is only applicable to newly formed contracts with no 
#  price path accumulation):
Asia.Call.b <- function(S.0, K, b, r, sigma, T)
{
  asia.b <- 0.5*(b - ((sigma^2)/6))
  asia.sigma <- sigma/sqrt(3)
  
  d.plus.asia <- (log(S.0/K) + (asia.b + 0.5*asia.sigma^2)*T)/(asia.sigma*sqrt(T))
  d.minus.asia <- (log(S.0/K) + (asia.b  - 0.5*asia.sigma^2)*T)/(asia.sigma*sqrt(T))

  exp((asia.b - r)*T)*S.0*pnorm(d.plus.asia, mean = 0, sd = 1) - exp(-r*T)*K*pnorm(d.minus.asia, mean = 0, sd = 1)
  
}
# Example of Geometrically Averaged Asian Call:
Asia.Call.b(45,41,.0211,.0211,.09,1)

### Asian Geometric Fixed Strike Put:
Asia.Put.b <-  function(S.0, K, b, r, sigma, T)
{
  asia.b <- 0.5*(b - ((sigma^2)/6))
  asia.sigma <- sigma/sqrt(3)
  
  d.plus.asia <- (log(S.0/K) + (asia.b + 0.5*asia.sigma^2)*T)/(asia.sigma*sqrt(T))
  d.minus.asia <- (log(S.0/K) + (asia.b - 0.5*asia.sigma^2)*T)/(asia.sigma*sqrt(T))
  
  -exp((asia.b - r)*T)*S.0*pnorm(-d.plus.asia, mean = 0, sd = 1) + exp(-r*T)*K*pnorm(-d.minus.asia, mean = 0, sd = 1)  
  
}

Asia.Put.b(34,46.11,.0211,.0211,.09,1)


## While there are other analytical formulas they are are complicated and highly dependent 
# upon the time value being assessed. Monte Carlo is therefore a more practical approach. 

## Simulating a geometric price path directly (can no longer just rely on terminal value S.T
# like in European style options. Must also simulate a discretized underlying path per time 
# increment. Say maturity is in 1 year of 250 trading days:
T <- 1 
M <- 250
delta.t <- T/M
b <- .0431 
r <- .024
sigma <- .1313
S.0 <- 20.17

S.path <- rep(NA,M)
for(i in 2:M)
{
  S.path[1] <- S.0
  S.path[i] <- S.path[(i-1)]*exp((b-0.5*sigma^2)*delta.t + sigma*sqrt(delta.t)*rnorm(1,0,1))
}

### Now generalizing into a MC generated pricing function for Arithmetic Fixed 
## fixed strike Asian Call Option:
## Note that Sim.DiffProc package is needed for simple
## S.0   = Initial price
## K     = Fixed strike value
## b     = Fair value cost of carry rate(usually just equal to r)
## sigma = Annualized volatility of 
## T     = Time to maturity
## M     = Number of price realizations S.t to be averaged over option lifetime
## N     = Number of price path simulations to be completed

Price.Paths <- GBM(N = 250, M = 50, x0 = 53.21, t0 = 0, T = 1, theta = .02, sigma = .111)
V.Asiavec <- rep(NA,50)
for(i in 1:50)
{
  V.Asiavec[i] <- max(((1/251)*sum(Price.Paths[,i]) - 50), 0)
}
V.0 <- exp(-.02*1)*(1/50)*sum(V.Asiavec)

## Function for Arithmetic Averaged Fixed Strike Asian Call Option using Monte Carlo:
Asian.Call.AMC <- function(S.0, K, b, r, sigma, T, t.0, N, M) 
{ # First Generate Price Paths data:
  Paths.Matrix <- GBM(N = N, M = M, x0 = S.0, t0 = t.0, T = T, Dt = NULL,
                      theta = b, sigma = sigma)
  # Then calculate payoff of arithmetic average of each price path minus strike:
  V.Asian <- rep(NA,M)
  for(i in 1:M) 
  {
    V.Asian[i] <- max(((1/(N+1))*sum(Paths.Matrix[,i]) - K), 0) 
  }
  # Finally return the option's value 
  exp(-r*T)*(1/M)*sum(V.Asian)

}
Asian.Call.AMC(55.13,50,.0311,.0311,.113,1,0,250,10000)

## Compare to Quantlib function:
AsianOption(averageType = "arithmetic", type = "call",underlying = 53.13,
            strike = 50,dividendYield = 0, riskFreeRate = 0.0311, maturity = 1, 
            volatility = 0.113, length = 1)

### Same Problem as above but constructing price path directly rather than using GBM 
## function
# Same inputs as before --- N is number of price observations per path i.e. = |t|, 
# M is number of potential paths of S.t stemming from S.0 observation:

Asian.Call.AMC2 <- function(S.0,K,b,r,sigma,T,N,M)
{
  # First inputs/skeleton of output structures:
  S.Paths <- matrix(NA, nrow = N+1, ncol = M)
  S.Paths[1,] <- S.0
  
  ## Section of code generates M price paths of N length, the Monte Carlo step:
  for(m in 1:M)
  {
    for(n in 2:(N+1)){
      S.Paths[n,m] <- S.Paths[(n-1),m]*exp(((b - 0.5*sigma^2)*(T/N)) + sigma*sqrt((T/N))*rnorm(1,0,1))
    }
  }
  
  ## Solves for the payoff of each vector
  V.bar <- rep(NA,M)
  for(i in 1:M) 
  {
    V.bar[i] <- max(((1/(N+1))*sum(S.Paths[,i])) - K,0)
  }
  
  ## Call is calculated as the average of all payoffs for each of all M paths:
  exp(-r*T)*(1/M)*sum(V.bar)
}

## Note that this answer is for initial price of AFSAOs where no stock price path
# has been accumulated. If time were to have passed since inception of of the contract
# then the known prices must be averaged along with the likely averages of future 
# price paths under the risk neutral measure.

Asian.Call.AMC2(55.13,50,.0311,.0311,.113,1,250,1000)



