##### Pricing Geometrically Averaged Fixed Strike Asian Options via Monte Carlo Simulation by Christopher Thomson

### Asian options are path dependent contracts in that their final payoff depends on the overall behaviour
## of the underlying asset. For geometrically averaged fixed strike contracts, the average of the log-prices of 
## the underlying over the option's lifetime is used as input. Therefore, in order to price asian options 
## effectively, it is highly desirable to use Monte Carlo Simulation to simulate potential/expected price 
## paths of the asset. 

## Simulating a geometric price path directly (can no longer just rely on terminal value S.T
# like in European style options. Must also simulate a discretized underlying path per time 
# increment. Say maturity is in 1 year of 250 trading days:
T <- 1 
M <- 250
delta.t <- T/M
b <- .0431 
r <- .024
sigma <- .1313
S.0 <- 20.17

S.path <- rep(NA,M)
for(i in 2:M)
{
  S.path[1] <- S.0
  S.path[i] <- S.path[(i-1)]*exp((b-0.5*sigma^2)*delta.t + sigma*sqrt(delta.t)*rnorm(1,0,1))
}

### Now generalizing into a MC generated pricing function for Arithmetic Fixed 
## fixed strike Asian Call Option:
## Note that Sim.DiffProc package is needed for simple
## S.0   = Initial price
## K     = Fixed strike value
## b     = Fair value cost of carry rate(usually just equal to r)
## sigma = Annualized volatility of 
## T     = Time to maturity
## M     = Number of price realizations S.t to be averaged over option lifetime
## N     = Number of price path simulations to be completed

Price.Paths <- GBM(N = 250, M = 50, x0 = 53.21, t0 = 0, T = 1, theta = .02, sigma = .111)
V.Asiavec <- rep(NA,50)
for(i in 1:50)
{
  V.Asiavec[i] <- max(((1/251)*sum(Price.Paths[,i]) - 50), 0)
}
V.0 <- exp(-.02*1)*(1/50)*sum(V.Asiavec)

## Function for Arithmetic Averaged Fixed Strike Asian Call Option using Monte Carlo:
Asian.Call.AMC <- function(S.0, K, b, r, sigma, T, t.0, N, M) 
{ # First Generate Price Paths data:
  Paths.Matrix <- GBM(N = N, M = M, x0 = S.0, t0 = t.0, T = T, Dt = NULL,
                      theta = b, sigma = sigma)
  # Then calculate payoff of arithmetic average of each price path minus strike:
  V.Asian <- rep(NA,M)
  for(i in 1:M) 
  {
    V.Asian[i] <- max(((1/(N+1))*sum(Paths.Matrix[,i]) - K), 0) 
  }
  # Finally return the option's value 
  exp(-r*T)*(1/M)*sum(V.Asian)

}
Asian.Call.AMC(55.13,50,.0311,.0311,.113,1,0,250,10000)

## Compare to Quantlib function:
AsianOption(averageType = "arithmetic", type = "call",underlying = 53.13,
            strike = 50,dividendYield = 0, riskFreeRate = 0.0311, maturity = 1, 
            volatility = 0.113, length = 1)

### Same Problem as above but constructing price path directly rather than using GBM 
## function
# Same inputs as before --- N is number of price observations per path i.e. = |t|, 
# M is number of potential paths of S.t stemming from S.0 observation:

Asian.Call.AMC2 <- function(S.0,K,b,r,sigma,T,N,M)
{
  # First inputs/skeleton of output structures:
  S.Paths <- matrix(NA, nrow = N+1, ncol = M)
  S.Paths[1,] <- S.0
  
  ## Section of code generates M price paths of N length, the Monte Carlo step:
  for(m in 1:M)
  {
    for(n in 2:(N+1)){
      S.Paths[n,m] <- S.Paths[(n-1),m]*exp(((b - 0.5*sigma^2)*(T/N)) + sigma*sqrt((T/N))*rnorm(1,0,1))
    }
  }
  
  ## Solves for the payoff of each vector
  V.bar <- rep(NA,M)
  for(i in 1:M) 
  {
    V.bar[i] <- max(((1/(N+1))*sum(S.Paths[,i])) - K,0)
  }
  
  ## Call is calculated as the average of all payoffs for each of all M paths:
  exp(-r*T)*(1/M)*sum(V.bar)
}

## Note that this answer is for initial price of AFSAOs where no stock price path
# has been accumulated. If time were to have passed since inception of of the contract
# then the known prices must be averaged along with the likely averages of future 
# price paths under the risk neutral measure.

Asian.Call.AMC2(55.13,50,.0311,.0311,.113,1,250,1000)



